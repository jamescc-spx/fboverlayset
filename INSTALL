BUILDING, INSTALLING fboverlayset
=================================

This is a command line application to control framebuffer overlays on the iMX6 device.

The iMX6 device has the facility of overlaying pairs of framebuffers and rendering the combined
imaged (by h/w - the IPU) when outputting to the display device.

This application allows the user to choose if a buffer is overlaid and whether the overlaid buffer
is combined using a global (image wide) alpha (for RGB images without an alpha channel), or by a 
local (pixel) level alpha (for RGBA with an alpha channel), or by using a colour key (where a 
specific colour is made transparent).

The project is built using autotools.


Autotools
---------

Autotools is a build environment for C which aids writing Makefiles, and facilitates portability.
Once understood it is very easy to alter the infrastructure, allowing the developer to focus on the
source code, documentation, and test development.

An autotools project can in four states:

"Fresh out of a Repository" - where you will need to run autotools to create the necessary
setup files to describe your project.  A configure script will be created for configuring the
project for different platforms.

"Source Distributable" - after running autotools you have a project that can be packages and
distributed as source.  This source then expects ./configure to be run to create the necessary
Makefiles.

"Configured and Buildable - Now with the Makefiles we can build the code using make and create some
"binaries.

"Test and Installable" - Now built the code can be tested, and it can be installed at a fixed
location.


COMMAND by COMMAND
==================

Dependencies
------------

This software has no library dependencies.  It controls the framebuffer via system IOCTL calls.


Initial Setup
-------------

Okay you have your project fresh out of the repository.

Type

    ./autogen.sh

This runs autotools and initialises a project creating the setup files.

You now have a "Source Distributable" project.  You could just follow the instruction in the INSTALL
file, but keeping reading if you want to cut to the chase!


Building
--------

The process is to run `./configure` and then run make as normal.

If you've used the Freescale Community YOCTO build (fslc) there is a helper script that configures
the necessary environment variables for you.  This will be part of the SDK created with 
populate_sdk, but cross compilation with other compilers is fine as long as you set your path
and usual compiler environment vars like CC, LD, ...

So for compiling for the target you will need to run...

    # Source your cross-compiler environment script.
    # In this case the YOCTO built SDK was installed to /opt/rd-dvc2-sdk
    . /opt/rd-dvc2-sdk/env*                 # cross compiler setup
    
    # then run configure with the cross compiler options
    ./configure --target=arm-poky-linux-gnueabi --host=arm-poky-linux-gnueabi --build=x86_64-linux
    make

Again the resulting executables are in ./src


When swapping between target and host builds `make distclean` before you run the ./configure script
again.  This cleans out the old object files/executables, preventing misbuilds.  e.g.

    make distclean
    ./configure --target=arm-poky-linux-gnueabi --host=arm-poky-linux-gnueabi --build=x86_64-linux
    make


Cleaning
--------

If you want to clean the project (back to state just after running "configure")...

    make clean

Or very clean (removing the affect of running "configure")...

    make distclean

Or sparkling (removing the affect of running autogen.sh)...

    make maintainer-clean


Installing and Distributing
---------------------------

To create an installation (binary) tarball that should be unpacked from / (root) use the
command...

    make install-tgz

This packages up build binaries (fboverlayset), and required configuration files (currently there
aren't any) and puts them in the correct place.   These places are...

    prefix=/usr/local
    bindir=${prefix}/bin                    (where fboverlayset will be placed)
    sysconfdir=/etc                         (any potential config files)

(these paths are controlled in Makefile.am - look for install-tgz make target)

Note - fboverlayset has no configuration files so sysconfdir is currently irrelevant.


Lastly perhaps you want to distribute the source code.

    make dist

This creates a tarball (tgz archive) of your "Source Distributable" project - you don't need to
clean to create this.  There are other source code distribution archive formats available, but
tgz is the most common.


Other Handy Facilities
----------------------

You can make tags files for unix style editors (emacs, vi, vim, nedit, and many new editors) with
the correct make target below...

    make tags
    make ctags
    make TAGS
    make GTAGS
    make cscope

This helps the editor lookup function and variable definitions/declarations.  You'll need either
ctags installed or cscope and an editor that supports one of those.


You can apply code styling using astyle (see CODING-STYLE) to keep any changes in line with the
project's coding style.  Requires astyle `apt-get install astyle`.

    make astyle


You can see complexity measurements.  Requires pmccabe `apt-get install pmccabe`.

    make pmccabe
